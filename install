#!/bin/bash

#shellcheck disable=SC2184      # Quote arguments to unset so they're not glob expanded
#shellcheck disable=SC2088      # Tilde does not expand in quotes. Use $HOME
#shellcheck disable=SC2053      # Quote the right-hand side of != in [[ ]] to prevent glob matching
#shellcheck disable=SC2091      # Remove surrounding $() to avoid executing output (or use eval if intentional)
#shellcheck disable=SC2086      # Double quote to prevent globbing and word splitting
#shellcheck disable=SC2120      # mucl references arguments, but none are ever passed

##################
# util functions #
##################

SUCCESS=0
FAILURE=1

MOVE_UP=$(tput cuu 1)
CLEAR_LINE=$(tput el 1)

function mucl() {
    if [[ $# -eq 0 ]]; then
        numIterations=1
    else
        numIterations=${1}
    fi
    for (( i = 0; i < numIterations; i++)); do
        echo "${MOVE_UP}${CLEAR_LINE}${MOVE_UP}"
    done
}

currDir="$(pwd)"

function apply_tput() {

    case "${1}" in
        black) tput setaf 0
        ;;
        red) tput setaf 1
        ;;
        green) tput setaf 2
        ;;
        yellow) tput setaf 3
        ;;
        blue) tput setaf 4
        ;;
        magenta) tput setaf 5
        ;;
        cyan) tput setaf 6
        ;;
        white) tput setaf 7
        ;;
        reset) tput sgr0
        ;;
        *) tput "${1}"
        ;;
    esac
}

# Usage: insert_new_lines 3
function insert_new_lines() {
    for (( i = 0; i < ${1}; i++)); do
        echo
    done
}

# Usage: banner_color 1 "red" "*" "my title" 2
function banner_color() {
    insert_new_lines ${1}

    apply_tput "${2}"
    apply_tput bold

    local msg="${3} ${4} ${3}"
    local edge
    edge=${msg//?/$3}
    echo "${edge}"
    echo "${msg}"
    printf "%s" "${edge}"

    apply_tput reset

    insert_new_lines ${5}
}

# Usage: banner_color_err 1 "error message" 2
function banner_color_err() {
    banner_color ${1} "red" "~" "[error] ${2}" ${3}
}

# Usage: print_as 3 "blue" "msg" 1
function print_as() {
    insert_new_lines ${1}; shift

	while [[ $# -gt 2 ]]; do
		apply_tput "${1}"; shift
	done
	local msg="${1}"; shift
	printf "%s" "${msg}"
	apply_tput reset

    insert_new_lines ${1};
}

# Usage: print_info 3 "msg" 2
function print_info() {
	print_as ${1} "blue" "${2}" ${3}
}

# Usage: print_err 3 "msg" 2
function print_err() {
	print_as ${1} "red" "${2}" ${3}
}

function is_command_installed() {

    if command -v "${1}" &>/dev/null; then
        echo true
    else
        echo false
    fi
}

function append_line() {
    set -e

    local line="${1}" file="${2}" pat="${3:-}" lno=""

    if [ -f "$file" ]; then
        if [ $# -lt 4 ]; then
            lno=$(grep -nF "$line" "$file" | sed 's/:.*//' | tr '\n' ' ')
        else
            lno=$(grep -nF "$pat" "$file" | sed 's/:.*//' | tr '\n' ' ')
        fi
    fi
    if [ -z "$lno" ]; then
        [ -f "$file" ] && echo >> "$file"
        echo "$line" >> "$file"
    fi
    set +e
}

# Usage: assert_equal A B msg
function assert_equal() {

    local A="${1}" B="${2}" msg="${3}"
    [[ "${A}" != "${B}" ]] && {
        mucl
        banner_color_err 0 "${msg}" 2
        exit ${FAILURE}
    }
}

# Usage: assert_success msg
function assert_success() {

    local status="$?" msg="${1}"
    assert_equal "${status}" ${SUCCESS} "${msg}"
}

function get_latest_annotated_tag() {
    git describe --abbrev=0 &> /dev/null
    if [[ $? -ne ${SUCCESS} ]]; then
        echo ""
        return
    fi
    git describe --abbrev=0
}

function install_clipboard() {

    if ! $(is_command_installed "npm"); then
        banner_color_err 1 "npm not installed" 1
        return ${FAILURE}
    fi
    print_info 1 "installing clipboard-cli ..." 1
    npm install -g clipboard-cli &> /dev/null
    if (( $? != SUCCESS )); then
        mucl 1
        banner_color 0 "black" "~" "couldn't install clipboard-cli" 1
        return ${FAILURE}
    fi
    mucl 1
    banner_color 0 "magenta" "*" "clipboard-cli installed" 1
}

function install_fzf() {

    print_info 1 "installing fzf ..." 1

    git clone --depth 1 https://github.com/junegunn/fzf.git "${FZF_HOME}" &> /dev/null
    if (( $? != SUCCESS )); then
        mucl
        banner_color_err 0 "couldn't fetch fzf! please check your network" 1
        return ${FAILURE}
    fi

    cd "${FZF_HOME}" || {
        mucl
        banner_color_err 0 "couldn't enter directory: ${FZF_HOME}" 1
        return ${FAILURE}
    }
    ./install --all &> /dev/null

    if (( $? != SUCCESS )); then
        mucl
        banner_color_err 0 "fzf installation failed" 1
        return ${FAILURE}
    fi

    mucl
    banner_color 0 "magenta" "*" "fzf installed" 1
}

function finish {
    cd "${currDir}" || {
        print_info 0 "couldn't enter the directory: ${currDir}" 2
        exit ${FAILURE}
    }
}
trap finish EXIT

#####################
# Enable custom-git #
#####################

shells=("bash" "zsh")
numShells=${#shells[@]}

for ((i = 0 ; i < numShells ; i++)); do
    shell="${shells[$i]}"
    if ! $(is_command_installed "${shell}"); then
        unset shells[$i]
    fi
done

if [[ ${#shells[@]} -eq 0 ]]; then
    print_err 0 "custom-git is only supported for bash and zsh shells" 2
    exit ${FAILURE}
fi

prefix='~/.custom-git'

CUSTOM_GIT_HOME="${HOME}"/.custom-git
FZF_HOME="${HOME}"/.fzf
CUSTOM_GIT_BASH_REPO_URL="https://github.com/custom-git/custom-git-bash"
CUSTOM_GIT_CLONE_URL="${CUSTOM_GIT_BASH_REPO_URL}.git"
CUSTOM_GIT_WEBSITE_URL="https://custom-git.io"

if ! $(is_command_installed "clipboard"); then

    install_clipboard
    if (( $? != SUCCESS )); then
        print_info 0 "please install clipboard-cli from " 0
        print_as 0 "magenta" "bold" "https://github.com/sindresorhus/clipboard-cli#install" 1
        print_info 0 "some custom-git features will not work without it" 1
        print_info 0 "for more details, visit: " 0
        print_as 0 "magenta" "bold" "${CUSTOM_GIT_WEBSITE_URL}/explorer/show/commit-logs" 1
    fi
fi

if ! $(is_command_installed "fzf"); then

    install_fzf
    if (( $? != SUCCESS )); then
        print_info 0 "please install fzf from " 0
        print_as 0 "magenta" "bold" "https://github.com/junegunn/fzf#installation" 1
        print_as 0 "blue" "and try again..." 2
        exit ${FAILURE}
    fi
fi

if [[ -d "${CUSTOM_GIT_HOME}" ]]; then
    print_info 0 "custom-git is already installed on your system" 2
    exit ${SUCCESS}
fi

print_info 1 "installing custom-git..." 1
git clone --recurse-submodules "${CUSTOM_GIT_CLONE_URL}" "${CUSTOM_GIT_HOME}" &> /dev/null
assert_success "couldn't fetch custom-git! please check your network"

if [[ ! -d "${CUSTOM_GIT_HOME}" ]]; then
    mucl
    banner_color_err 0 "installation failure! couldn't create the directory ${prefix}" 2
    exit ${FAILURE}
fi

cd "${CUSTOM_GIT_HOME}" || {
    banner_color_err 0 "installation failure! couldn't enter the directory: ${CUSTOM_GIT_HOME}" 2
    exit ${FAILURE}
}

latestVersion="$(get_latest_annotated_tag)"
git checkout "${latestVersion}" &> /dev/null
git submodule update --init --recursive &> /dev/null
assert_success "couldn't update submodule! please check your network"

for shell in "${shells[@]}"; do
    [ $shell = zsh ] && dest=${ZDOTDIR:-~}/.zshrc || dest=~/.bashrc
    append_line "[ -f ${prefix}/init.${shell} ] && source ${prefix}/init.${shell}" "$dest" "source ${prefix}/init.${shell}"
done

mucl
banner_color 0 "magenta" "*" "installation complete - custom-git ${latestVersion}" 1
print_info 0 "to browse the custom-git features, visit: " 0
print_as 0 "magenta" "bold" "${CUSTOM_GIT_WEBSITE_URL}/explorer" 1

print_info 1 "to enable custom-git, restart your shell session or reload the config file with the following command:" 1
for shell in "${shells[@]}"; do
    case "${shell}" in
        bash)
            printf "$ source ~/.bashrc  # bash shell"
            archi=$(uname -sm)
            [[ "$archi" =~ Darwin ]] && printf "  (~/.bashrc should be sourced from ~/.bash_profile)"
            echo
            ;;
        zsh)
            echo "$ source ${ZDOTDIR:-~}/.zshrc   # zsh shell"
            ;;
        *)
            printf "\n%s shell is not supported.\n" "${shell}"
            ;;
    esac
done

echo