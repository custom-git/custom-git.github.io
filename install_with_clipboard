#!/bin/bash

#shellcheck disable=SC2184      # Quote arguments to unset so they're not glob expanded.
#shellcheck disable=SC2088      # Tilde does not expand in quotes. Use $HOME.
#shellcheck disable=SC2053      # Quote the right-hand side of != in [[ ]] to prevent glob matching.
#shellcheck disable=SC2091      # Remove surrounding $() to avoid executing output (or use eval if intentional).
#shellcheck disable=SC2086      # Double quote to prevent globbing and word splitting.

##################
# util functions #
##################

SUCCESS=0
FAILURE=1

MOVE_UP=$(tput cuu 1)
CLEAR_LINE=$(tput el 1)

function mucl() {
    echo "${MOVE_UP}${CLEAR_LINE}${MOVE_UP}"
}

function apply_tput() {

    case "${1}" in
        black) tput setaf 0
        ;;
        red) tput setaf 1
        ;;
        green) tput setaf 2
        ;;
        yellow) tput setaf 3
        ;;
        blue) tput setaf 4
        ;;
        magenta) tput setaf 5
        ;;
        cyan) tput setaf 6
        ;;
        white) tput setaf 7
        ;;
        reset) tput sgr0
        ;;
        *) tput "${1}"
        ;;
    esac
}

# Usage: insert_new_lines 3
function insert_new_lines() {
    for (( i = 0; i < ${1}; i++)); do
        echo
    done
}

# Usage: banner_color 1 "red" "*" "my title" 2
function banner_color() {
    insert_new_lines ${1}

    apply_tput "${2}"
    apply_tput bold

    local msg="${3} ${4} ${3}"
    local edge
    edge=${msg//?/$3}
    echo "${edge}"
    echo "${msg}"
    printf "%s" "${edge}"

    apply_tput reset

    insert_new_lines ${5}
}

# Usage: banner_color_err 1 "error msg" 2
function banner_color_err() {
    banner_color ${1} "red" "~" "[ERROR] ${2}" ${3}
}

# Usage: print_as 3 "blue" "msg" 1
function print_as() {
    insert_new_lines ${1}; shift

	while [[ $# -gt 2 ]]; do
		apply_tput "${1}"; shift
	done
	local msg="${1}"; shift
	printf "%s" "${msg}"
	apply_tput reset

    insert_new_lines ${1};
}

# Usage: print_info 3 "msg" 2
function print_info() {
	print_as ${1} "blue" "[INFO] ${2}" ${3}
}

# Usage: print_err 3 "msg" 2
function print_err() {
	print_as ${1} "red" "[ERROR] ${2}" ${3}
}

function is_command_installed() {

    if command -v "${1}" &>/dev/null; then
        echo true
    else
        echo false
    fi
}

#####################
# Enable custom-git #
#####################

insert_new_lines 1

archi=$(uname -sm)
shells=("bash" "zsh")

for ((i = 0 ; i < ${#shells[@]} ; i++)); do
    shell="${shells[$i]}"
    if ! $(is_command_installed "${shell}"); then
        unset shells[$i]
    fi
done

if [[ ${#shells[@]} -eq 0 ]]; then
    print_err 0 "custom-git is only supported for bash and zsh shells. Stopping installation." 2
    exit $FAILURE
fi

prefix='~/.custom-git'
currDir="$(pwd)"

CUSTOM_GIT_HOME="$HOME"/.custom-git
CUSTOM_CONSOLE_HOME="$CUSTOM_GIT_HOME"/custom-console

function install_clipboard() {

    clipboard_installation_status=$SUCCESS

    if ! $(is_command_installed "npm"); then
        clipboard_installation_status=$FAILURE
        banner_color_err 1 "npm not installed." 2
        return
    fi
    print_info 0 "Installing clipboard-cli ..." 1
    sudo npm install -g clipboard-cli &> /dev/null

    if (( $? != SUCCESS )); then
        clipboard_installation_status=$FAILURE
        mucl
        mucl
        banner_color_err 0 "clipboard-cli installation failed." 2
        return
    fi

    mucl
    mucl
    banner_color 0 "magenta" "*" "clipboard-cli installed." 2
}

if ! $(is_command_installed "clipboard"); then

    install_clipboard
    if [[ $clipboard_installation_status -eq $FAILURE ]]; then
        print_info 0 "Please install clipboard-cli from " 0
        print_as 0 "magenta" "bold" "\"https://github.com/sindresorhus/clipboard-cli\"" 1
        print_info 0 "Otherwise, some custom-git commands may not work correctly." 2
    fi
fi

function install_fzf() {

    print_info 0 "Installing fzf ..." 1

    fzf_installation_status=$SUCCESS
    git clone --depth 1 https://github.com/junegunn/fzf.git "$HOME"/.fzf &> /dev/null
    cd "$HOME"/.fzf || {
        fzf_installation_status=$FAILURE
        mucl
        banner_color_err 0 "couldn't enter directory: $HOME/.fzf" 2
        return
    }
    ./install --all &> /dev/null

    if (( $? != SUCCESS )); then
        fzf_installation_status=$FAILURE
        mucl
        banner_color_err 0 "fzf installation failed." 2
        return
    fi

    mucl
    banner_color 0 "magenta" "*" "fzf installed." 2

    cd "$currDir" || {
        banner_color_err 0 "couldn't enter directory: $currDir" 2
        return
    }
}

if ! $(is_command_installed "fzf"); then

    install_fzf
    if [[ $fzf_installation_status -eq $FAILURE ]]; then
        print_info 0 "Please install fzf from " 0
        print_as 0 "magenta" "bold" "https://github.com/junegunn/fzf#installation" 1
        print_as 0 "blue" "and try again..." 2
        exit $FAILURE
    fi
fi

if [[ -d "${CUSTOM_GIT_HOME}" ]]; then
    print_info 0 "custom-git is already installed on your system." 2
    exit $SUCCESS
fi

print_info 0 "Installing custom-git..." 1
git clone -b v0.1.0 --depth 1 https://github.com/custom-git/custom-git-bash.git "${CUSTOM_GIT_HOME}" &> /dev/null
if (( $? != SUCCESS )); then
    mucl
    banner_color_err 0 "Some error occurred while fetching custom-git. Please check your network." 2
    exit ${FAILURE}
fi

if [[ ! -d "${CUSTOM_GIT_HOME}" ]]; then
    mucl
    banner_color_err 0 "$(printf "Couldn't create the directory %s. Exiting." "${prefix}")" 2
    exit ${FAILURE}
fi

append_line() {
    set -e

    local line file pat lno
    line="$1"
    file="$2"
    pat="${3:-}"
    lno=""

    if [ -f "$file" ]; then
        if [ $# -lt 4 ]; then
            lno=$(\grep -nF "$line" "$file" | sed 's/:.*//' | tr '\n' ' ')
        else
            lno=$(\grep -nF "$pat" "$file" | sed 's/:.*//' | tr '\n' ' ')
        fi
    fi
    if [ -z "$lno" ]; then
        [ -f "$file" ] && echo >> "$file"
        echo "$line" >> "$file"
    fi
    set +e
}

for shell in "${shells[@]}"; do
    src=${CUSTOM_GIT_HOME}.${shell}

    cat > "$src" << EOF
# ----------------
# Setup custom-git
# ----------------
if [[ ! "\$PATH" == *$CUSTOM_GIT_HOME/cmd* ]]; then
    export PATH="\${PATH:+\${PATH}:}$CUSTOM_GIT_HOME/cmd"
fi
if [[ ! "\$PATH" == *$CUSTOM_GIT_HOME/util* ]]; then
    export PATH="\${PATH:+\${PATH}:}$CUSTOM_GIT_HOME/util"
fi
if [[ ! "\$PATH" == *$CUSTOM_CONSOLE_HOME/cmd* ]]; then
    export PATH="\${PATH:+\${PATH}:}$CUSTOM_CONSOLE_HOME/cmd"
fi
if [[ ! "\$PATH" == *$CUSTOM_CONSOLE_HOME/util* ]]; then
    export PATH="\${PATH:+\${PATH}:}$CUSTOM_CONSOLE_HOME/util"
fi
export FZF_DEFAULT_OPTS="--reverse --border --height 80%"

EOF

done

for shell in "${shells[@]}"; do
    [ $shell = zsh ] && dest=${ZDOTDIR:-~}/.zshrc || dest=~/.bashrc
    append_line "[ -f ${prefix}.${shell} ] && source ${prefix}.${shell}" "$dest" "${prefix}.${shell}"
done

mucl
banner_color 0 "magenta" "*" "custom-git installed successfully." 2

print_info 0 "Restart your shell or reload config file." 1
for shell in "${shells[@]}"; do
    case "${shell}" in
        bash)
            printf "   source ~/.bashrc  # bash"
            [[ "$archi" =~ Darwin ]] && echo "  (~/.bashrc should be sourced from ~/.bash_profile)"
            ;;
        zsh)
            echo "   source ${ZDOTDIR:-~}/.zshrc   # zsh"
            ;;
        *)
            printf "\n%s shell is not supported.\n" "${shell}"
            ;;
    esac
done

print_info 1 "For more details, visit: " 0
print_as 0 "magenta" "bold" "https://github.com/custom-git/custom-git-bash" 2
