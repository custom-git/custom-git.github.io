#!/usr/bin/env bash

function __CG_print_enabled_message() {
    printf "\rcustom-git commands are enabled for this shell session.\n"
    printf "Have fun...\n\n"
}

__CG_SUCCESS=0
__CG_FAILURE=1

function __CG_try_reset() {
    __CG_EXEC_STATUS=$__CG_SUCCESS
}

if [[ -n "$__CG_TRY_ENABLED__" ]]; then
    echo
    __CG_print_enabled_message
    return
fi

__CG_EXEC_STATUS=$__CG_SUCCESS

function __CG_is_fzf_installed() {

    if command -v fzf &>/dev/null; then
        echo true
    else
        echo false
    fi
}

function __CG_handle_fzf_installation() {

    printf "\ncustom-git requires fzf (fuzzy finder) to work.\nAllow me to install it on your system? (y/n) : "
    read -r
    if [[ "$REPLY" != "y" ]]; then
        __CG_fzf_installation_status=$__CG_FAILURE
        return
    fi
    echo

    __CG_curr_dir=$(pwd)

    printf "Installing fzf ..."
    git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf &> /dev/null
    cd ~/.fzf/
    ./install --all &> /dev/null

    cd $__CG_curr_dir
}

if [[ $(__CG_is_fzf_installed) == false ]]; then
    
    __CG_fzf_installation_status=$__CG_SUCCESS
    __CG_handle_fzf_installation
    if [[ $__CG_fzf_installation_status -eq $__CG_FAILURE ]]; then
        printf "\nPlease install fzf from \"https://github.com/junegunn/fzf#installation\"\nand try again...\n\n"
        __CG_try_reset
        return
    fi
    printf "\rfzf installed successfully.\n\n"
    echo "Restart your shell and run the custom-git 'try' command again."
    printf "\n\
    if command -v curl >/dev/null 2>&1; then\n\
        curl -fsSL -o ~/.custom-git.try https://custom-git.io/try\n\
        source ~/.custom-git.try\n\
    else\n\
        wget -q -O ~/.custom-git.try https://custom-git.io/try\n\
        source ~/.custom-git.try\n\
    fi\n"
    __CG_try_reset
    return
fi

printf "\nEnabling custom-git commands ..."

export FZF_WIDGET_TMUX=1
export FZF_DEFAULT_OPTS="--reverse --border --height 80%"

function gadd() {

    __CG_assertgitrepo
    if [[ $__CG_EXEC_STATUS -eq $__CG_FAILURE ]]; then
        echo "[AssertionError] should be a git repo."
        __CG_try_reset
        return
    fi

    numUnstagedFiles=$(git status --short | grep "^[ ?]" -c)
    if [[ $numUnstagedFiles -eq 0 ]]; then
        gstatus
        printf "\n[INFO] No unstaged files.\n"
        return
    fi

    # use command line arguments if provided
    if [[ $# -gt 0 ]]; then
        [[ "$1" == "." ]] && git add -A || git add $*
        gstatus
        return
    fi

    git status --short | grep "^[ ?]" | fzf -m --color 'fg:160' | sed -e 's/...//' | xargs git add
    gstatus
}

function gstatus() {
    
    __CG_assertgitrepo
    if [[ $__CG_EXEC_STATUS -eq $__CG_FAILURE ]]; then
        echo "[AssertionError] not a git repo."
        __CG_try_reset
        return
    fi

    clear
    git status
}

# util
function __CG_isgitrepo() {

    if git rev-parse --git-dir > /dev/null 2>&1; then
        # This is a valid git repository.
        echo true
    else
        echo false
    fi
}

function __CG_assertgitrepo() {

    if [[ $(__CG_isgitrepo) == false ]]; then
        __CG_EXEC_STATUS=$__CG_FAILURE
        return
    fi
}

__CG_try_reset
__CG_print_enabled_message
__CG_TRY_ENABLED__="true"
