#!/bin/bash

#shellcheck disable=SC2184      # Quote arguments to unset so they're not glob expanded.
#shellcheck disable=SC2088      # Tilde does not expand in quotes. Use $HOME.
#shellcheck disable=SC2053      # Quote the right-hand side of != in [[ ]] to prevent glob matching.
#shellcheck disable=SC2091      # Remove surrounding $() to avoid executing output (or use eval if intentional).
#shellcheck disable=SC2164      # Use 'cd ... || exit' or 'cd ... || return' in case cd fails.
#shellcheck disable=SC2120      # references arguments, but none are ever passed.
#shellcheck disable=SC2086      # Double quote to prevent globbing and word splitting.

##################
# util functions #
##################

__CG_MOVE_UP=$(tput cuu 1)
__CG_CLEAR_LINE=$(tput el 1)
alias __CG_MUCL='echo ${__CG_MOVE_UP}${__CG_CLEAR_LINE}${__CG_MOVE_UP}'

function __cg_apply_tput() {

    case "${1}" in
        black) tput setaf 0
        ;;
        red) tput setaf 1
        ;;
        green) tput setaf 2
        ;;
        yellow) tput setaf 3
        ;;
        blue) tput setaf 4
        ;;
        magenta) tput setaf 5
        ;;
        cyan) tput setaf 6
        ;;
        white) tput setaf 7
        ;;
        reset) tput sgr0
        ;;
        *) tput "${1}"
        ;;
    esac
}

# Usage: __cg_insert_new_lines 3
function __cg_insert_new_lines() {
    for (( i = 0; i < ${1}; i++)); do
        echo
    done
}

# Usage: __cg_banner_color 1 "red" "*" "my title" 2
function __cg_banner_color() {
    __cg_insert_new_lines ${1}

    __cg_apply_tput "${2}"
    __cg_apply_tput bold

    local msg="${3} ${4} ${3}"
    local edge
    edge=${msg//?/$3}
    echo "${edge}"
    echo "${msg}"
    printf "%s" "${edge}"

    __cg_apply_tput reset

    __cg_insert_new_lines ${5}
}

# Usage: __cg_banner_color_err 1 "error msg" 2
function __cg_banner_color_err() {
    __cg_banner_color ${1} "red" "~" "[ERROR] ${2}" ${3}
}

# Usage: __cg_print_as 3 "blue" "msg" 1
function __cg_print_as() {
    __cg_insert_new_lines ${1}; shift

	while [[ $# -gt 2 ]]; do
		__cg_apply_tput "${1}"; shift
	done
	local msg="${1}"; shift
	printf "%s" "${msg}"
	__cg_apply_tput reset

    __cg_insert_new_lines ${1};
}

# Usage: __cg_print_info 3 "msg" 2
function __cg_print_info() {
	__cg_print_as ${1} "blue" "[INFO] ${2}" ${3}
}

# Usage: __cg_print_err 3 "msg" 2
function __cg_print_err() {
	__cg_print_as ${1} "red" "[ERROR] ${2}" ${3}
}

function __cg_is_command_installed() {

    if command -v "${1}" &>/dev/null; then
        echo true
    else
        echo false
    fi
}

###########################
# Enable custom-git trial #
###########################

__cg_insert_new_lines 1

__cg_shells=("bash" "zsh")
__cg_shellsNotFound=0

for shell in "${__cg_shells[@]}"; do
    if ! command -v "$shell" > /dev/null; then
        __cg_shellsNotFound=$((__cg_shellsNotFound + 1))
    fi
done

if [[ ${#__cg_shells[@]} -eq $__cg_shellsNotFound ]]; then
    __cg_print_err 0 "custom-git is only supported for bash and zsh shells. Stopping installation." 2
    return
fi

__CG_SUCCESS=0
__CG_FAILURE=1
__cg_prefix='~/.custom-git'
__cg_currDir="$(pwd)"
__cg_restart_shell=false

export CUSTOM_GIT_HOME="$HOME"/.custom-git-trial
export CUSTOM_CONSOLE_HOME="$CUSTOM_GIT_HOME"/custom-console-bash

function __cg_install_clipboard() {

    __cg_clipboard_installation_status=$__CG_SUCCESS

    if ! $(__cg_is_command_installed "npm"); then
        __cg_clipboard_installation_status=$__CG_FAILURE
        __cg_banner_color_err 1 "npm not installed." 2
        return
    fi
    __cg_print_info 1 "Installing clipboard-cli ..." 1
    sudo npm install -g clipboard-cli &> /dev/null

    if (( $? != __CG_SUCCESS )); then
        __cg_clipboard_installation_status=$__CG_FAILURE
        __CG_MUCL
        __cg_banner_color_err 0 "clipboard-cli installation failed." 2
        return
    fi

    __CG_MUCL
    __cg_banner_color 0 "magenta" "*" "clipboard-cli installed." 2
}

if ! $(__cg_is_command_installed "clipboard"); then

    __cg_print_info 0 "Some custom-git commands use " 0
    __cg_print_as 0 "magenta" "bold" "clipboard-cli " 1
    __cg_print_as 0 "blue" "Allow me to install it on your system? (y/n) : " 0

    read -r
    if [[ "$REPLY" != "y" ]]; then
        __cg_print_info 1 "Please install clipboard-cli from " 0
        __cg_print_as 0 "magenta" "bold" "\"https://github.com/sindresorhus/clipboard-cli\"" 1
        __cg_print_info 0 "Some custom-git commands may not work correctly." 2
    else
        __cg_install_clipboard
        if [[ $__cg_clipboard_installation_status -eq $__CG_FAILURE ]]; then
            __cg_print_info 0 "Please install clipboard-cli from " 0
            __cg_print_as 0 "magenta" "bold" "\"https://github.com/sindresorhus/clipboard-cli\"" 1
            __cg_print_info 0 "Some custom-git commands may not work correctly." 2
        fi
    fi
fi

function __cg_install_fzf() {

    __cg_print_info 1 "Installing fzf ..." 1
    git clone --depth 1 https://github.com/junegunn/fzf.git "$HOME"/.fzf &> /dev/null
    cd "$HOME"/.fzf || {
        __cg_fzf_installation_status=$__CG_FAILURE
        __CG_MUCL
        __cg_banner_color_err 0 "couldn't enter directory: $HOME/.fzf" 2
        return
    }
    ./install --all &> /dev/null

    if (( $? != __CG_SUCCESS )); then
        __cg_fzf_installation_status=$__CG_FAILURE
        __CG_MUCL
        __cg_banner_color_err 0 "fzf installation failed." 2
        return
    fi

    __CG_MUCL
    __cg_banner_color 0 "magenta" "*" "fzf installed (restart your shell)" 2

    __cg_restart_shell=true

    cd "$__cg_currDir" || {
        __cg_banner_color_err 0 "couldn't enter directory: $__cg_currDir" 2
        return
    }
}

if ! $(__cg_is_command_installed "fzf"); then

    __cg_print_info 0 "custom-git requires " 0
    __cg_print_as 0 "magenta" "bold" "fzf (fuzzy finder)" 0
    __cg_print_as 0 "blue" " to work." 1
    __cg_print_as 0 "blue" "Allow me to install it on your system? (y/n) : " 0

    read -r
    if [[ "$REPLY" != "y" ]]; then
        __cg_print_info 1 "Please install fzf from " 0
        __cg_print_as 0 "magenta" "bold" "\"https://github.com/junegunn/fzf#installation\"" 1
        __cg_print_as 0 "blue" "and try again..." 2
        return
    fi

    __cg_fzf_installation_status=$__CG_SUCCESS
    __cg_install_fzf
    if [[ $__cg_fzf_installation_status -eq $__CG_FAILURE ]]; then
        __cg_print_info 0 "Please install fzf from " 0
        __cg_print_as 0 "magenta" "bold" "\"https://github.com/junegunn/fzf#installation\"" 1
        __cg_print_as 0 "blue" "and try again..." 2
        return
    fi
fi

if $__cg_restart_shell; then

    __cg_print_info 0 "After shell restart, run the 'try' command again." 1
    printf '
if command -v curl &>/dev/null; then
    curl -fsSL -o ~/.custom-git.try https://custom-git.io/try
    source ~/.custom-git.try
else
    wget -q -O ~/.custom-git.try https://custom-git.io/try
    source ~/.custom-git.try
fi

'
    return
fi

if [[ -d "$CUSTOM_GIT_HOME" ]]; then
    cd "${CUSTOM_GIT_HOME}"
    git switch integ &> /dev/null
    __cg_print_info 0 "Fetching latest integ branch of custom-git" 1
    git pull &> /dev/null

    if (( $? != __CG_SUCCESS )); then
        __CG_MUCL
        __cg_banner_color_err 0 "Some error occurred while fetching custom-git. Please check your network." 2
        cd "$__cg_currDir" || __cg_banner_color_err 1 "couldn't enter directory: $__cg_currDir" 2
        return
    fi

    cd "$__cg_currDir" || __cg_banner_color_err 1 "couldn't enter directory: $__cg_currDir" 2

else

    __cg_print_info 0 "Enabling custom-git commands..." 1
    git clone --recurse-submodules --single-branch --branch integ\
        https://github.com/custom-git/custom-git-bash.git "$CUSTOM_GIT_HOME" &> /dev/null

    if (( $? != __CG_SUCCESS )); then
        __CG_MUCL
        __cg_banner_color_err 0 "Some error occurred while fetching custom-git. Please check your network." 2
        return
    fi

    if [[ ! -d "$CUSTOM_GIT_HOME" ]]; then
        __CG_MUCL
        __cg_banner_color_err 0 "$(printf "Couldn't create the directory %s. Exiting." "$__cg_prefix")" 2
        return
    fi
fi

export __CUSTOM_GIT_UTIL="$CUSTOM_GIT_HOME"/util
export __CUSTOM_CONSOLE_UTIL="$CUSTOM_CONSOLE_HOME"/util

if [[ ! "$PATH" == *$CUSTOM_CONSOLE_HOME/cmd* ]]; then
    export PATH="$CUSTOM_CONSOLE_HOME/cmd${PATH:+:${PATH}}"
fi
if [[ ! "$PATH" == *$CUSTOM_GIT_HOME/cmd* ]]; then
    export PATH="$CUSTOM_GIT_HOME/cmd${PATH:+:${PATH}}"
fi

export FZF_DEFAULT_OPTS="--reverse --border --ansi --preview-window wrap:down:70% --tabstop=4"
export FZF_DEFAULT_OPTS="${FZF_DEFAULT_OPTS} --color='preview-fg:-1'"

__CG_MUCL
__cg_banner_color 0 "magenta" "*" "All the custom-git commands are enabled for this shell session. Current installation won't be affected." 2
__cg_print_info 0 'For more details, visit: https://github.com/custom-git/custom-git-bash' 2
